@page "/ListadoMarcaVacuna"

@using Models;
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util
<ChartJsPieChart @ref="_pieChartJs" Config="@_config" Width="800" Height="300" />

<h1>Listado por Marcas de Vacunas </h1>

@if (datos != null)
{
    if (datos.Any())
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    @foreach (Dictionary<string, string> diccionario in titulos)
                    {

                        <th>@diccionario["tipo"]</th>
                    }
                </tr>
                <tr>
                    @foreach (Dictionary<string, int> diccionario in datos)
                    {

                        <td>@diccionario["cantidad"]</td>
                    }
                </tr>

            </thead>
        </table>}
}

@code { protected override async Task OnInitializedAsync()
    {
        listar();
    }

    List<Dictionary<string, string>> titulos = null;
    List<Dictionary<string, int>> datos = null;
    List<string> tipoV = new List<string>();
    List<double> cantidadV = new List<double>();
    List<string> colorV = new List<string>();
    registro_vacunasContext db = new registro_vacunasContext();

    int cantidad;
    string tipo;
    string nombrev;
    int titu;

    int titulosCount = 1;
    int datosCount = 1;


    void listar()
    {
        titulos = new List<Dictionary<string, string>>();
        datos = new List<Dictionary<string, int>>();

        var query = from v in db.Vacunas
                        //join ve in db.VacunasExistentes on v.Id equals ve.Id

                    group v by v.Type
                   into g
                    orderby g.Count() descending

                    select new
                    {
                        tipo = g.Key,
                        cantidad = g.Count()


                    };



        foreach (var i in query)
        {


            var dic1 = new Dictionary<string, string>();
            var dic2 = new Dictionary<string, int>();

            dic1.Add("tipo", i.tipo);
            dic2.Add("cantidad", i.cantidad);

            titulos.Add(dic1);
            datos.Add(dic2);

            datosCount = datos.Count();



            if (tipoV.Contains(i.tipo) == false)
            {

                tipoV.Add(i.tipo);
                colorV.Add(ColorUtil.RandomColorString());
            }

            cantidadV.Add(i.cantidad);

        }

        grafica();
    }

    private PieConfig _config;
    private ChartJsPieChart _pieChartJs;
    void grafica()
    {


        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Vacunados por Marca de Vacuna"
                },
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                }
            }
        };



        _config.Data.Labels.AddRange(tipoV.ToArray());

        var pieSet = new PieDataset
        {

            //cantidadV.ToArray(),
            BackgroundColor = colorV.ToArray(),
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff",
        };

        pieSet.Data.AddRange(cantidadV.ToArray());
        _config.Data.Datasets.Add(pieSet);
    }


}








